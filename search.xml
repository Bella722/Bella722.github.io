<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu20.04下成功配置TensorFlow Object Detection API 教程</title>
    <url>/post/1a71c089.html</url>
    <content><![CDATA[<h1 id="1-新建一个名为TensorFlow的文件夹"><a href="#1-新建一个名为TensorFlow的文件夹" class="headerlink" title="1.新建一个名为TensorFlow的文件夹"></a>1.新建一个名为TensorFlow的文件夹</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir TensorFlow</span><br></pre></td></tr></table></figure>

<h1 id="2-打开终端，cd进入TensorFlow"><a href="#2-打开终端，cd进入TensorFlow" class="headerlink" title="2.打开终端，cd进入TensorFlow"></a>2.打开终端，cd进入TensorFlow</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd TensorFlow</span><br></pre></td></tr></table></figure>

<h1 id="3-克隆TensorFlow-Models"><a href="#3-克隆TensorFlow-Models" class="headerlink" title="3.克隆TensorFlow Models"></a>3.克隆TensorFlow Models</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;models.git</span><br></pre></td></tr></table></figure>

<p>现在你的TensorFlow文件夹应该如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TensorFlow&#x2F;</span><br><span class="line">└─ models&#x2F;</span><br><span class="line">   ├─ community&#x2F;</span><br><span class="line">   ├─ official&#x2F;</span><br><span class="line">   ├─ orbit&#x2F;</span><br><span class="line">   ├─ research&#x2F;</span><br><span class="line">   └── ...</span><br></pre></td></tr></table></figure>

<h1 id="4-配置Protobuf"><a href="#4-配置Protobuf" class="headerlink" title="4.配置Protobuf"></a>4.配置Protobuf</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install protobuf</span><br><span class="line">cd models&#x2F;research&#x2F;</span><br><span class="line">protoc object_detection&#x2F;protos&#x2F;*.proto --python_out&#x3D;.</span><br></pre></td></tr></table></figure>

<h1 id="5-配置COCO-API"><a href="#5-配置COCO-API" class="headerlink" title="5.配置COCO API"></a>5.配置COCO API</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;cocodataset&#x2F;cocoapi.git</span><br><span class="line">cd cocoapi&#x2F;PythonAPI</span><br><span class="line">make</span><br><span class="line">cp -r pycocotools &lt;PATH_TO_TF&gt;&#x2F;TensorFlow&#x2F;models&#x2F;research&#x2F;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/Ubuntu20-04%E4%B8%8B%E6%88%90%E5%8A%9F%E9%85%8D%E7%BD%AETensorFlow-Object-Detection-API-%E6%95%99%E7%A8%8B/Screenshot%20from%202020-08-31%2016-04-34-1598871276938.png" alt="Screenshot from 2020-08-31 16-04-34"></p>
<p><img data-src="/../images/Ubuntu20-04%E4%B8%8B%E6%88%90%E5%8A%9F%E9%85%8D%E7%BD%AETensorFlow-Object-Detection-API-%E6%95%99%E7%A8%8B/Screenshot%20from%202020-08-31%2016-05-05-1598871293831.png" alt="Screenshot from 2020-08-31 16-05-05"></p>
<h1 id="6-安装Object-Detection-API"><a href="#6-安装Object-Detection-API" class="headerlink" title="6.安装Object Detection API"></a>6.安装Object Detection API</h1><p>这里需要注意一点，先要确认你的tensorflow版本，我的是tf1.x，所以这里我要拷贝的是tf1的setup,如果你的是tf2.x,那就拷贝tf2的setup.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#确保你当前在TensorFlow&#x2F;models&#x2F;research&#x2F;文件夹下</span><br><span class="line">cp object_detection&#x2F;packages&#x2F;tf2&#x2F;setup.py .</span><br><span class="line">python -m pip install .</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/Ubuntu20-04%E4%B8%8B%E6%88%90%E5%8A%9F%E9%85%8D%E7%BD%AETensorFlow-Object-Detection-API-%E6%95%99%E7%A8%8B/Screenshot%20from%202020-08-31%2016-05-18-1598871310225.png" alt="Screenshot from 2020-08-31 16-05-18"></p>
<h1 id="7-测试Object-Detection-API是否安装成功"><a href="#7-测试Object-Detection-API是否安装成功" class="headerlink" title="7.测试Object Detection API是否安装成功"></a>7.测试Object Detection API是否安装成功</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python object_detection&#x2F;builders&#x2F;model_builder_tf1_test.py</span><br></pre></td></tr></table></figure>

<p>注意这里也是要和你自己的tensorflow版本对上。</p>
<p>测试通过则说明安装无误。</p>
<p><img data-src="/../images/Ubuntu20-04%E4%B8%8B%E6%88%90%E5%8A%9F%E9%85%8D%E7%BD%AETensorFlow-Object-Detection-API-%E6%95%99%E7%A8%8B/Screenshot%20from%202020-08-31%2018-03-06-1598871325137.png" alt="Screenshot from 2020-08-31 18-03-06"></p>
]]></content>
      <categories>
        <category>Ubuntu下TensorFlow Object Detection API实战</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu下利用TensorFlow Object Detection API训练自己的数据集</title>
    <url>/post/bb2ec196.html</url>
    <content><![CDATA[<p>如果你是跟着我之前的教程配置过来的，那相信你目前已经有一个名为Tensorflow的文件夹了，且包含的内容具体如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">TensorFlow/</span><br><span class="line">└─ models/</span><br><span class="line">   ├─ community/</span><br><span class="line">   ├─ official/</span><br><span class="line">   ├─ orbit/</span><br><span class="line">   ├─ research/</span><br><span class="line">   └─ ...</span><br></pre></td></tr></table></figure>

<p>接下来我们就直入主题开始训练步骤。</p>
<h3 id="1-在Tensorflow文件夹下新建workspace的文件夹，在workspace下再新建training-demo文件夹"><a href="#1-在Tensorflow文件夹下新建workspace的文件夹，在workspace下再新建training-demo文件夹" class="headerlink" title="1. 在Tensorflow文件夹下新建workspace的文件夹，在workspace下再新建training_demo文件夹"></a>1. 在Tensorflow文件夹下新建workspace的文件夹，在workspace下再新建training_demo文件夹</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">TensorFlow/</span><br><span class="line">├─ models/</span><br><span class="line">│  ├─ community/</span><br><span class="line">│  ├─ official/</span><br><span class="line">│  ├─ orbit/</span><br><span class="line">│  ├─ research/</span><br><span class="line">│  └─ ...</span><br><span class="line">└─ workspace/</span><br><span class="line">   └─ training_demo/</span><br></pre></td></tr></table></figure>

<p>对于training_demo文件夹，主要存放数据集，训练输出的模型以及预训练模型。最终的具体形式如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">training_demo/</span><br><span class="line">├─ annotations/</span><br><span class="line">├─ exported-models/</span><br><span class="line">├─ images/</span><br><span class="line">│  ├─ test/</span><br><span class="line">│  └─ train/</span><br><span class="line">├─ models/</span><br><span class="line">├─ pre-trained-models/</span><br><span class="line">└─ README.md</span><br></pre></td></tr></table></figure>

<h3 id="2-准备数据集"><a href="#2-准备数据集" class="headerlink" title="2. 准备数据集"></a>2. 准备数据集</h3><p>这里需要说明的是，如果你现在还没有标注或者准备好要训练的数据集，那么建议你只需要新建除test以及train之外的相应位置的文件夹，把你需要标注的所有图像放在images下，然后用诸如labelImg的工具完成标注工作，将最终的xml注释文件全部置于annotations文件夹下。至于labelImg的具体使用方法可以自行搜索，非常简单。</p>
<p>接下来比较重要的一步是进行训练与测试的划分，即将数据集按照一定比例划分为训练集与测试集，通常的比例是9：1。如果你的数据集只有一类目标，那么可以直接用下面的代码自动生成test与train文件夹。 <a href="/download/partition_dataset.py">点击下载代码</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; usage: partition_dataset.py [-h] [-i IMAGEDIR] [-o OUTPUTDIR] [-r RATIO] [-x]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Partition dataset of images into training and testing sets</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">optional arguments:</span></span><br><span class="line"><span class="string">  -h, --help            show this help message and exit</span></span><br><span class="line"><span class="string">  -i IMAGEDIR, --imageDir IMAGEDIR</span></span><br><span class="line"><span class="string">                        Path to the folder where the image dataset is stored. If not specified, the CWD will be used.</span></span><br><span class="line"><span class="string">  -o OUTPUTDIR, --outputDir OUTPUTDIR</span></span><br><span class="line"><span class="string">                        Path to the output folder where the train and test dirs should be created. Defaults to the same directory as IMAGEDIR.</span></span><br><span class="line"><span class="string">  -r RATIO, --ratio RATIO</span></span><br><span class="line"><span class="string">                        The ratio of the number of test images over the total number of images. The default is 0.1.</span></span><br><span class="line"><span class="string">  -x, --xml             Set this flag if you want the xml annotation files to be processed and copied over.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> copyfile</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iterate_dir</span>(<span class="params">source, dest, ratio, copy_xml</span>):</span></span><br><span class="line">    source = source.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    dest = dest.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    train_dir = os.path.join(dest, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    test_dir = os.path.join(dest, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(train_dir):</span><br><span class="line">        os.makedirs(train_dir)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(test_dir):</span><br><span class="line">        os.makedirs(test_dir)</span><br><span class="line"></span><br><span class="line">    images = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(source)</span><br><span class="line">              <span class="keyword">if</span> re.search(<span class="string">r&#x27;([a-zA-Z0-9\s_\\.\-\(\):])+(.jpg|.jpeg|.png)$&#x27;</span>, f)]</span><br><span class="line"></span><br><span class="line">    num_images = len(images)</span><br><span class="line">    num_test_images = math.ceil(ratio*num_images)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_test_images):</span><br><span class="line">        idx = random.randint(<span class="number">0</span>, len(images)<span class="number">-1</span>)</span><br><span class="line">        filename = images[idx]</span><br><span class="line">        copyfile(os.path.join(source, filename),</span><br><span class="line">                 os.path.join(test_dir, filename))</span><br><span class="line">        <span class="keyword">if</span> copy_xml:</span><br><span class="line">            xml_filename = os.path.splitext(filename)[<span class="number">0</span>]+<span class="string">&#x27;.xml&#x27;</span></span><br><span class="line">            copyfile(os.path.join(source, xml_filename),</span><br><span class="line">                     os.path.join(test_dir,xml_filename))</span><br><span class="line">        images.remove(images[idx])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> images:</span><br><span class="line">        copyfile(os.path.join(source, filename),</span><br><span class="line">                 os.path.join(train_dir, filename))</span><br><span class="line">        <span class="keyword">if</span> copy_xml:</span><br><span class="line">            xml_filename = os.path.splitext(filename)[<span class="number">0</span>]+<span class="string">&#x27;.xml&#x27;</span></span><br><span class="line">            copyfile(os.path.join(source, xml_filename),</span><br><span class="line">                     os.path.join(train_dir, xml_filename))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initiate argument parser</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;Partition dataset of images into training and testing sets&quot;</span>,</span><br><span class="line">                                     formatter_class=argparse.RawTextHelpFormatter)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--imageDir&#x27;</span>,</span><br><span class="line">        help=<span class="string">&#x27;Path to the folder where the image dataset is stored. If not specified, the CWD will be used.&#x27;</span>,</span><br><span class="line">        type=str,</span><br><span class="line">        default=os.getcwd()</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;-o&#x27;</span>, <span class="string">&#x27;--outputDir&#x27;</span>,</span><br><span class="line">        help=<span class="string">&#x27;Path to the output folder where the train and test dirs should be created. &#x27;</span></span><br><span class="line">             <span class="string">&#x27;Defaults to the same directory as IMAGEDIR.&#x27;</span>,</span><br><span class="line">        type=str,</span><br><span class="line">        default=<span class="literal">None</span></span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;-r&#x27;</span>, <span class="string">&#x27;--ratio&#x27;</span>,</span><br><span class="line">        help=<span class="string">&#x27;The ratio of the number of test images over the total number of images. The default is 0.1.&#x27;</span>,</span><br><span class="line">        default=<span class="number">0.1</span>,</span><br><span class="line">        type=float)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;--xml&#x27;</span>,</span><br><span class="line">        help=<span class="string">&#x27;Set this flag if you want the xml annotation files to be processed and copied over.&#x27;</span>,</span><br><span class="line">        action=<span class="string">&#x27;store_true&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.outputDir <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        args.outputDir = args.imageDir</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Now we are ready to start the iteration</span></span><br><span class="line">    iterate_dir(args.imageDir, args.outputDir, args.ratio, args.xml)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>这里建议在TensorFlow主文件夹下新建scripts/preprocessing文件夹，用来存放这些自动化的py文件。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">TensorFlow/</span><br><span class="line">├─ models/</span><br><span class="line">│  ├─ community/</span><br><span class="line">│  ├─ official/</span><br><span class="line">│  ├─ orbit/</span><br><span class="line">│  ├─ research/</span><br><span class="line">│  └─ ...</span><br><span class="line">├─ scripts/</span><br><span class="line">│  └─ preprocessing/</span><br><span class="line">└─ workspace/</span><br><span class="line">   └─ training_demo/</span><br></pre></td></tr></table></figure>

<p>运行的时候只要在TensorFlow/scripts/preprocessing文件夹下运行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python partition_dataset.py -x -i [PATH_TO_IMAGES_FOLDER] -r <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment"># python partition_dataset.py -x -i C:/Users/sglvladi/Documents/Tensorflow/workspace/training_demo/images -r 0.1</span></span><br></pre></td></tr></table></figure>

<p>就会在training_demo/images下新建training_demo/images/train和training_demo/images/test这两个文件夹，并且在train和test下可以看到既有图像文件又有xml注释文件，并且train与test文件数目比为9：1.</p>
<p><strong>这里提醒一点：当你的数据集是包含两种及以上类别的目标时，建议不要直接这么操作，原因是样本可能会不被均匀非配，这样造成的后果就是你在之后训练的时候可能出现训练集主要是A目标，而测试集主要是B目标，所以可想而知，模型的效果会有多差，所以在这种情况下建议以样本均衡为原则进行分配，保证训练集与测试集的统一与均衡。</strong></p>
<h3 id="3-创建-Label-Map"><a href="#3-创建-Label-Map" class="headerlink" title="3. 创建 Label Map"></a>3. 创建 Label Map</h3><p>在training_demo/annotations下新建label_map.pbtxt文件，内容为：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">item &#123;</span><br><span class="line">    id: 1</span><br><span class="line">    name: &#x27;dirty&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item &#123;</span><br><span class="line">    id: 2</span><br><span class="line">    name: &#x27;oil&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item &#123;</span><br><span class="line">    id: 3</span><br><span class="line">    name: &#x27;pit&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item &#123;</span><br><span class="line">    id: 4</span><br><span class="line">    name: &#x27;scratch&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item &#123;</span><br><span class="line">    id: 5</span><br><span class="line">    name: &#x27;wire_drawing&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-生成TensorFlow-Records文件"><a href="#4-生成TensorFlow-Records文件" class="headerlink" title="4. 生成TensorFlow Records文件"></a>4. 生成TensorFlow Records文件</h3><p>之前生成的training_demo/images/train与training_demo/images/test文件夹下的xml可通过以下代码转换成record文件<a href="download/generate_tfrecord.py">点击下载转换代码</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; Sample TensorFlow XML-to-TFRecord converter</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">usage: generate_tfrecord.py [-h] [-x XML_DIR] [-l LABELS_PATH] [-o OUTPUT_PATH] [-i IMAGE_DIR] [-c CSV_PATH]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">optional arguments:</span></span><br><span class="line"><span class="string">  -h, --help            show this help message and exit</span></span><br><span class="line"><span class="string">  -x XML_DIR, --xml_dir XML_DIR</span></span><br><span class="line"><span class="string">                        Path to the folder where the input .xml files are stored.</span></span><br><span class="line"><span class="string">  -l LABELS_PATH, --labels_path LABELS_PATH</span></span><br><span class="line"><span class="string">                        Path to the labels (.pbtxt) file.</span></span><br><span class="line"><span class="string">  -o OUTPUT_PATH, --output_path OUTPUT_PATH</span></span><br><span class="line"><span class="string">                        Path of output TFRecord (.record) file.</span></span><br><span class="line"><span class="string">  -i IMAGE_DIR, --image_dir IMAGE_DIR</span></span><br><span class="line"><span class="string">                        Path to the folder where the input image files are stored. Defaults to the same directory as XML_DIR.</span></span><br><span class="line"><span class="string">  -c CSV_PATH, --csv_path CSV_PATH</span></span><br><span class="line"><span class="string">                        Path of output .csv file. If none provided, then no file will be written.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="string">&#x27;2&#x27;</span>    <span class="comment"># Suppress TensorFlow logging (1)</span></span><br><span class="line"><span class="keyword">import</span> tensorflow.compat.v1 <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> object_detection.utils <span class="keyword">import</span> dataset_util, label_map_util</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initiate argument parser</span></span><br><span class="line">parser = argparse.ArgumentParser(</span><br><span class="line">    description=<span class="string">&quot;Sample TensorFlow XML-to-TFRecord converter&quot;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-x&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;--xml_dir&quot;</span>,</span><br><span class="line">                    help=<span class="string">&quot;Path to the folder where the input .xml files are stored.&quot;</span>,</span><br><span class="line">                    type=str)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-l&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;--labels_path&quot;</span>,</span><br><span class="line">                    help=<span class="string">&quot;Path to the labels (.pbtxt) file.&quot;</span>, type=str)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-o&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;--output_path&quot;</span>,</span><br><span class="line">                    help=<span class="string">&quot;Path of output TFRecord (.record) file.&quot;</span>, type=str)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-i&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;--image_dir&quot;</span>,</span><br><span class="line">                    help=<span class="string">&quot;Path to the folder where the input image files are stored. &quot;</span></span><br><span class="line">                         <span class="string">&quot;Defaults to the same directory as XML_DIR.&quot;</span>,</span><br><span class="line">                    type=str, default=<span class="literal">None</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;-c&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;--csv_path&quot;</span>,</span><br><span class="line">                    help=<span class="string">&quot;Path of output .csv file. If none provided, then no file will be &quot;</span></span><br><span class="line">                         <span class="string">&quot;written.&quot;</span>,</span><br><span class="line">                    type=str, default=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.image_dir <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    args.image_dir = args.xml_dir</span><br><span class="line"></span><br><span class="line">label_map = label_map_util.load_labelmap(args.labels_path)</span><br><span class="line">label_map_dict = label_map_util.get_label_map_dict(label_map)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xml_to_csv</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Iterates through all .xml files (generated by labelImg) in a given directory and combines</span></span><br><span class="line"><span class="string">    them in a single Pandas dataframe.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    path : str</span></span><br><span class="line"><span class="string">        The path containing the .xml files</span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    Pandas DataFrame</span></span><br><span class="line"><span class="string">        The produced dataframe</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    xml_list = []</span><br><span class="line">    <span class="keyword">for</span> xml_file <span class="keyword">in</span> glob.glob(path + <span class="string">&#x27;/*.xml&#x27;</span>):</span><br><span class="line">        tree = ET.parse(xml_file)</span><br><span class="line">        root = tree.getroot()</span><br><span class="line">        <span class="keyword">for</span> member <span class="keyword">in</span> root.findall(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">            value = (root.find(<span class="string">&#x27;filename&#x27;</span>).text,</span><br><span class="line">                     int(root.find(<span class="string">&#x27;size&#x27;</span>)[<span class="number">0</span>].text),</span><br><span class="line">                     int(root.find(<span class="string">&#x27;size&#x27;</span>)[<span class="number">1</span>].text),</span><br><span class="line">                     member[<span class="number">0</span>].text,</span><br><span class="line">                     int(member[<span class="number">4</span>][<span class="number">0</span>].text),</span><br><span class="line">                     int(member[<span class="number">4</span>][<span class="number">1</span>].text),</span><br><span class="line">                     int(member[<span class="number">4</span>][<span class="number">2</span>].text),</span><br><span class="line">                     int(member[<span class="number">4</span>][<span class="number">3</span>].text)</span><br><span class="line">                     )</span><br><span class="line">            xml_list.append(value)</span><br><span class="line">    column_name = [<span class="string">&#x27;filename&#x27;</span>, <span class="string">&#x27;width&#x27;</span>, <span class="string">&#x27;height&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;xmin&#x27;</span>, <span class="string">&#x27;ymin&#x27;</span>, <span class="string">&#x27;xmax&#x27;</span>, <span class="string">&#x27;ymax&#x27;</span>]</span><br><span class="line">    xml_df = pd.DataFrame(xml_list, columns=column_name)</span><br><span class="line">    <span class="keyword">return</span> xml_df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_text_to_int</span>(<span class="params">row_label</span>):</span></span><br><span class="line">    <span class="keyword">return</span> label_map_dict[row_label]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">df, group</span>):</span></span><br><span class="line">    data = namedtuple(<span class="string">&#x27;data&#x27;</span>, [<span class="string">&#x27;filename&#x27;</span>, <span class="string">&#x27;object&#x27;</span>])</span><br><span class="line">    gb = df.groupby(group)</span><br><span class="line">    <span class="keyword">return</span> [data(filename, gb.get_group(x)) <span class="keyword">for</span> filename, x <span class="keyword">in</span> zip(gb.groups.keys(), gb.groups)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tf_example</span>(<span class="params">group, path</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tf.gfile.GFile(os.path.join(path, <span class="string">&#x27;&#123;&#125;&#x27;</span>.format(group.filename)), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fid:</span><br><span class="line">        encoded_jpg = fid.read()</span><br><span class="line">    encoded_jpg_io = io.BytesIO(encoded_jpg)</span><br><span class="line">    image = Image.open(encoded_jpg_io)</span><br><span class="line">    width, height = image.size</span><br><span class="line"></span><br><span class="line">    filename = group.filename.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    image_format = <span class="string">b&#x27;jpg&#x27;</span></span><br><span class="line">    xmins = []</span><br><span class="line">    xmaxs = []</span><br><span class="line">    ymins = []</span><br><span class="line">    ymaxs = []</span><br><span class="line">    classes_text = []</span><br><span class="line">    classes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index, row <span class="keyword">in</span> group.object.iterrows():</span><br><span class="line">        xmins.append(row[<span class="string">&#x27;xmin&#x27;</span>] / width)</span><br><span class="line">        xmaxs.append(row[<span class="string">&#x27;xmax&#x27;</span>] / width)</span><br><span class="line">        ymins.append(row[<span class="string">&#x27;ymin&#x27;</span>] / height)</span><br><span class="line">        ymaxs.append(row[<span class="string">&#x27;ymax&#x27;</span>] / height)</span><br><span class="line">        classes_text.append(row[<span class="string">&#x27;class&#x27;</span>].encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">        classes.append(class_text_to_int(row[<span class="string">&#x27;class&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">    tf_example = tf.train.Example(features=tf.train.Features(feature=&#123;</span><br><span class="line">        <span class="string">&#x27;image/height&#x27;</span>: dataset_util.int64_feature(height),</span><br><span class="line">        <span class="string">&#x27;image/width&#x27;</span>: dataset_util.int64_feature(width),</span><br><span class="line">        <span class="string">&#x27;image/filename&#x27;</span>: dataset_util.bytes_feature(filename),</span><br><span class="line">        <span class="string">&#x27;image/source_id&#x27;</span>: dataset_util.bytes_feature(filename),</span><br><span class="line">        <span class="string">&#x27;image/encoded&#x27;</span>: dataset_util.bytes_feature(encoded_jpg),</span><br><span class="line">        <span class="string">&#x27;image/format&#x27;</span>: dataset_util.bytes_feature(image_format),</span><br><span class="line">        <span class="string">&#x27;image/object/bbox/xmin&#x27;</span>: dataset_util.float_list_feature(xmins),</span><br><span class="line">        <span class="string">&#x27;image/object/bbox/xmax&#x27;</span>: dataset_util.float_list_feature(xmaxs),</span><br><span class="line">        <span class="string">&#x27;image/object/bbox/ymin&#x27;</span>: dataset_util.float_list_feature(ymins),</span><br><span class="line">        <span class="string">&#x27;image/object/bbox/ymax&#x27;</span>: dataset_util.float_list_feature(ymaxs),</span><br><span class="line">        <span class="string">&#x27;image/object/class/text&#x27;</span>: dataset_util.bytes_list_feature(classes_text),</span><br><span class="line">        <span class="string">&#x27;image/object/class/label&#x27;</span>: dataset_util.int64_list_feature(classes),</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">return</span> tf_example</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">_</span>):</span></span><br><span class="line"></span><br><span class="line">    writer = tf.python_io.TFRecordWriter(args.output_path)</span><br><span class="line">    path = os.path.join(args.image_dir)</span><br><span class="line">    examples = xml_to_csv(args.xml_dir)</span><br><span class="line">    grouped = split(examples, <span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> grouped:</span><br><span class="line">        tf_example = create_tf_example(group, path)</span><br><span class="line">        writer.write(tf_example.SerializeToString())</span><br><span class="line">    writer.close()</span><br><span class="line">    print(<span class="string">&#x27;Successfully created the TFRecord file: &#123;&#125;&#x27;</span>.format(args.output_path))</span><br><span class="line">    <span class="keyword">if</span> args.csv_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        examples.to_csv(args.csv_path, index=<span class="literal">None</span>)</span><br><span class="line">        print(<span class="string">&#x27;Successfully created the CSV file: &#123;&#125;&#x27;</span>.format(args.csv_path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure>

<p>具体使用方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create train data:</span></span><br><span class="line">python generate_tfrecord.py -x [PATH_TO_IMAGES_FOLDER]/train -l [PATH_TO_ANNOTATIONS_FOLDER]/label_map.pbtxt -o [PATH_TO_ANNOTATIONS_FOLDER]/train.record</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create test data:</span></span><br><span class="line">python generate_tfrecord.py -x [PATH_TO_IMAGES_FOLDER]/<span class="built_in">test</span> -l [PATH_TO_ANNOTATIONS_FOLDER]/label_map.pbtxt -o [PATH_TO_ANNOTATIONS_FOLDER]/test.record</span><br><span class="line"></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment"># python generate_tfrecord.py -x C:/Users/sglvladi/Documents/Tensorflow/workspace/training_demo/images/train -l C:/Users/sglvladi/Documents/Tensorflow/workspace/training_demo/annotations/label_map.pbtxt -o C:/Users/sglvladi/Documents/Tensorflow/workspace/training_demo/annotations/train.record</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python generate_tfrecord.py -x C:/Users/sglvladi/Documents/Tensorflow/workspace/training_demo/images/test -l C:/Users/sglvladi/Documents/Tensorflow2/workspace/training_demo/annotations/label_map.pbtxt -o C:/Users/sglvladi/Documents/Tensorflow/workspace/training_demo/annotations/test.record</span></span><br></pre></td></tr></table></figure>

<p>之后会在training_demo/annotations文件夹下生成test.record 和 train.record 即为转换成功。</p>
<p><img data-src="../images/Ubuntu%E4%B8%8B%E5%88%A9%E7%94%A8TensorFlow-Object-Detection-API%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/Screenshot%20from%202020-08-31%2016-05-28.png" alt="Screenshot from 2020-08-31 16-05-28"></p>
<h3 id="5-下载预训练模型"><a href="#5-下载预训练模型" class="headerlink" title="5. 下载预训练模型"></a>5. 下载预训练模型</h3><p>这里我以ssd_inception_v2为例。下载预训练模型这里需要注意一点：tf版本。</p>
<p>如果你是tf1.x<a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf1_detection_zoo.md">就进入进行下载</a>。</p>
<p>如果你是tf2.x<a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2_detection_zoo.md">就进入进行下载</a>。</p>
<p>将下载好的模型解压到pre-trained-models下。形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">training_demo&#x2F;</span><br><span class="line">├─ ...</span><br><span class="line">├─ pre-trained-models&#x2F;</span><br><span class="line">│  └─ ssd_inception_v2_coco_2018_01_28&#x2F;</span><br><span class="line">│     ├─ saved_model&#x2F;</span><br><span class="line">│       ├─ pipeline.config</span><br><span class="line">│     └─ ...</span><br></pre></td></tr></table></figure>

<h3 id="6-设置训练Pipeline"><a href="#6-设置训练Pipeline" class="headerlink" title="6. 设置训练Pipeline"></a>6. 设置训练Pipeline</h3><p>首先在training_demo/models下创建文件夹my_ssd_inception_v2;</p>
<p>然后复制training_demo/pre-trained-models/ssd_inception_v2_coco_2018_01_28/pipeline.config到training_demo/models/my_ssd_inception_v2；</p>
<p>接着打开training_demo/models/my_ssd_inception_v2下的pipeline.config；</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">model &#123;</span><br><span class="line">  ssd &#123;</span><br><span class="line">    num_classes: 5          #####编辑你的num_class#####</span><br><span class="line">    image_resizer &#123;</span><br><span class="line">      fixed_shape_resizer &#123;</span><br><span class="line">        height: 300</span><br><span class="line">        width: 300</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    feature_extractor &#123;</span><br><span class="line">      type: &quot;ssd_inception_v2&quot;</span><br><span class="line">      depth_multiplier: 1.0</span><br><span class="line">      min_depth: 16</span><br><span class="line">      conv_hyperparams &#123;</span><br><span class="line">        regularizer &#123;</span><br><span class="line">          l2_regularizer &#123;</span><br><span class="line">            weight: 3.99999989895e-05</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        initializer &#123;</span><br><span class="line">          truncated_normal_initializer &#123;</span><br><span class="line">            mean: 0.0</span><br><span class="line">            stddev: 0.0299999993294</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        activation: RELU_6</span><br><span class="line">        batch_norm &#123;</span><br><span class="line">          decay: 0.999700009823</span><br><span class="line">          center: true</span><br><span class="line">          scale: true</span><br><span class="line">          epsilon: 0.0010000000475</span><br><span class="line">          train: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      override_base_feature_extractor_hyperparams: true    #####这个位置加上这句#####</span><br><span class="line">    &#125;</span><br><span class="line">    box_coder &#123;</span><br><span class="line">      faster_rcnn_box_coder &#123;</span><br><span class="line">        y_scale: 10.0</span><br><span class="line">        x_scale: 10.0</span><br><span class="line">        height_scale: 5.0</span><br><span class="line">        width_scale: 5.0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    matcher &#123;</span><br><span class="line">      argmax_matcher &#123;</span><br><span class="line">        matched_threshold: 0.5</span><br><span class="line">        unmatched_threshold: 0.5</span><br><span class="line">        ignore_thresholds: false</span><br><span class="line">        negatives_lower_than_unmatched: true</span><br><span class="line">        force_match_for_each_row: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    similarity_calculator &#123;</span><br><span class="line">      iou_similarity &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    box_predictor &#123;</span><br><span class="line">      convolutional_box_predictor &#123;</span><br><span class="line">        conv_hyperparams &#123;</span><br><span class="line">          regularizer &#123;</span><br><span class="line">            l2_regularizer &#123;</span><br><span class="line">              weight: 3.99999989895e-05</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          initializer &#123;</span><br><span class="line">            truncated_normal_initializer &#123;</span><br><span class="line">              mean: 0.0</span><br><span class="line">              stddev: 0.0299999993294</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          activation: RELU_6</span><br><span class="line">        &#125;</span><br><span class="line">        min_depth: 0</span><br><span class="line">        max_depth: 0</span><br><span class="line">        num_layers_before_predictor: 0</span><br><span class="line">        use_dropout: false</span><br><span class="line">        dropout_keep_probability: 0.800000011921</span><br><span class="line">        kernel_size: 3</span><br><span class="line">        box_code_size: 4</span><br><span class="line">        apply_sigmoid_to_scores: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    anchor_generator &#123;</span><br><span class="line">      ssd_anchor_generator &#123;</span><br><span class="line">        num_layers: 6</span><br><span class="line">        min_scale: 0.20000000298</span><br><span class="line">        max_scale: 0.949999988079</span><br><span class="line">        aspect_ratios: 1.0</span><br><span class="line">        aspect_ratios: 2.0</span><br><span class="line">        aspect_ratios: 0.5</span><br><span class="line">        aspect_ratios: 3.0</span><br><span class="line">        aspect_ratios: 0.333299994469</span><br><span class="line">        reduce_boxes_in_lowest_layer: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post_processing &#123;</span><br><span class="line">      batch_non_max_suppression &#123;</span><br><span class="line">        score_threshold: 0.300000011921</span><br><span class="line">        iou_threshold: 0.600000023842</span><br><span class="line">        max_detections_per_class: 100</span><br><span class="line">        max_total_detections: 100</span><br><span class="line">      &#125;</span><br><span class="line">      score_converter: SIGMOID</span><br><span class="line">    &#125;</span><br><span class="line">    normalize_loss_by_num_matches: true</span><br><span class="line">    loss &#123;</span><br><span class="line">      localization_loss &#123;</span><br><span class="line">        weighted_smooth_l1 &#123;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      classification_loss &#123;</span><br><span class="line">        weighted_sigmoid &#123;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      hard_example_miner &#123;</span><br><span class="line">        num_hard_examples: 3000</span><br><span class="line">        iou_threshold: 0.990000009537</span><br><span class="line">        loss_type: CLASSIFICATION</span><br><span class="line">        max_negatives_per_positive: 3</span><br><span class="line">        min_negatives_per_image: 0</span><br><span class="line">      &#125;</span><br><span class="line">      classification_weight: 1.0</span><br><span class="line">      localization_weight: 1.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">train_config &#123;</span><br><span class="line">  batch_size: 24               #####batch_size根据你的内存更改#####</span><br><span class="line">  data_augmentation_options &#123;</span><br><span class="line">    random_horizontal_flip &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  data_augmentation_options &#123;</span><br><span class="line">    ssd_random_crop &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  optimizer &#123;</span><br><span class="line">    rms_prop_optimizer &#123;</span><br><span class="line">      learning_rate &#123;</span><br><span class="line">        exponential_decay_learning_rate &#123;</span><br><span class="line">          initial_learning_rate: 0.00400000018999</span><br><span class="line">          decay_steps: 800720</span><br><span class="line">          decay_factor: 0.949999988079</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      momentum_optimizer_value: 0.899999976158</span><br><span class="line">      decay: 0.899999976158</span><br><span class="line">      epsilon: 1.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fine_tune_checkpoint: &quot;pre-trained-models/ssd_inception_v2_coco_2018_01_28/model.ckpt&quot;    #####更改路径#####</span><br><span class="line">  from_detection_checkpoint: true</span><br><span class="line">  num_steps: 200000    #####更改steps数目#####</span><br><span class="line">&#125;</span><br><span class="line">train_input_reader &#123;</span><br><span class="line">  label_map_path: &quot;annotations/label_map.pbtxt&quot;  #####更改路径#####</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: &quot;annotations/train.record&quot;       #####更改路径#####</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">eval_config &#123;</span><br><span class="line">  num_examples: 8000</span><br><span class="line">  max_evals: 10</span><br><span class="line">  use_moving_averages: false</span><br><span class="line">&#125;</span><br><span class="line">eval_input_reader &#123;</span><br><span class="line">  label_map_path: &quot;annotations/label_map.pbtxt&quot;    #####更改路径#####</span><br><span class="line">  shuffle: false</span><br><span class="line">  num_readers: 1</span><br><span class="line">  tf_record_input_reader &#123;</span><br><span class="line">    input_path: &quot;annotations/test.record&quot;          #####更改路径#####</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-开始训练"><a href="#7-开始训练" class="headerlink" title="7. 开始训练"></a>7. 开始训练</h3><p>tf1.x版本的复制TensorFlow/models/research/object_detection/model_main.py到training_demo文件夹</p>
<p>tf2.x版本的复制TensorFlow/models/research/object_detection/model_main_tf2.py到training_demo文件夹</p>
<p>定位到training_demo文件夹，运行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python model_main.py --model_dir=models/my_ssd_inception_v2 --pipeline_config_path=models/my_ssd_inception_v2/pipeline.config</span><br></pre></td></tr></table></figure>

<p>如果遇到如下error,则是忘了加上override_base_feature_extractor_hyperparams: true    #####这个位置加上这句#####</p>
<p><img data-src="../images/Ubuntu%E4%B8%8B%E5%88%A9%E7%94%A8TensorFlow-Object-Detection-API%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/Screenshot%20from%202020-08-31%2016-05-36.png" alt="Screenshot from 2020-08-31 16-05-36"></p>
<p><img data-src="../images/Ubuntu%E4%B8%8B%E5%88%A9%E7%94%A8TensorFlow-Object-Detection-API%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/Screenshot%20from%202020-08-31%2016-05-59.png" alt="Screenshot from 2020-08-31 16-05-59"><img data-src="../images/Ubuntu%E4%B8%8B%E5%88%A9%E7%94%A8TensorFlow-Object-Detection-API%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/Screenshot%20from%202020-08-31%2016-09-45.png" alt="Screenshot from 2020-08-31 16-09-45"></p>
<p>训练成功则如下：</p>
<p><img data-src="../images/Ubuntu%E4%B8%8B%E5%88%A9%E7%94%A8TensorFlow-Object-Detection-API%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/Screenshot%20from%202020-09-01%2014-19-16.png" alt="Screenshot from 2020-09-01 14-19-16"></p>
]]></content>
      <categories>
        <category>Ubuntu下TensorFlow Object Detection API实战</category>
      </categories>
  </entry>
</search>
